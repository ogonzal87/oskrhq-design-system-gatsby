$ds-base-grid-point-system: $ds-base-font-size;

$ds-spacing-data: (
  none: 0,                           
  extra-tight: 4px,
  tight:       8px,
  base:        16px,
  bit-loose:   24px,
  loose:       32px,
  extra-loose: 48px,
  super-loose: 64px
);

/// Returns the spacing value for a given variant.
///
/// @param {String} $variant - The key for the given variant.
/// @return {Number} The spacing for the variant.

@function ds-space($variant: base) {
  $fetched-value: map-get($ds-spacing-data, $variant);

  @if type-of($fetched-value) == number {
    @return $fetched-value;
  } @else {
    @error 'Spacing variant `#{$variant}` not found. Available variants: #{available-names($ds-spacing-data)}';
  }
}

////
/// Layout
/// @group foundation/layout
////
$ds-layout-width-data: (
  mobile: (
    min: 240px,
    max: 344px
  ), 
  tablet: (
    min: 345, 
    max: 768px
  ),
  desktop: (
    min: 769px
  ),
  left-nav: (
    base: 240px
  ),
  header: (
    base: 100%
  ),
  page-content-wrapper: (
    base: 768px
  ),
  page-content: (
    base: 1040px
  )
);

$ds-container-layout-data: ( 
  inner-spacing: (
    none: spacing(none),
    extra-tight: spacing(extra-tight),
    tight: spacing(tight),
    base: spacing(base),
    loose: spacing(loose),
    extra-loose: spacing(extra-loose)
  ),
  outer-spacing: (
    none: spacing(none),
    extra-tight: spacing(extra-tight),
    tight: spacing(tight),
    base: spacing(base),
    loose: spacing(loose),
    extra-loose: spacing(extra-loose)
  )
);

/// Returns the widths of the specified column.
/// @param {String} $name - The column name.
/// @return {Number} The width for the column.

@function ds-layout-width($name, $value: base) {
  $fetched-value: map-get(map-get($ds-layout-width-data, $name), $value);

  @if type-of($fetched-value) != null {
    @return $fetched-value;
  } @else {
    @error 'Column `#{$name} - #{$value}` not found. Available columns: #{available-names($ds-layout-width-data)}';
  }
}

/// Returns the margin and padding of a container.
/// @param {String} $name - The column name.
/// @return {Number} The width for the column.

@function ds-container-layout($name, $value: base) {
  $fetched-value: map-get(map-get($ds-container-layout-data, $name), $value);

  @if type-of($fetched-value) != null {
    @return $fetched-value;
  } @else {
    @error 'Column `#{$name} - #{$value}` not found. Available columns: #{available-names($ds-container-layout-data)}';
  }
}



/////////////////////////////////////////////////////////////////////////////////////////////////////
// Grid System using Neat https://neat.bourbon.io/docs/latest/
/////////////////////////////////////////////////////////////////////////////////////////////////////

$ds-custom-grid: (
  columns: 12,
  gutter: 16px,
  color: ds-color(tertiary, 400)
);

.ds-col-container {
  @include grid-container;
  @include grid-collapse;
}

.ds-col-12 {
   @include grid-column(12, $ds-custom-grid)
}

.ds-col-11 {
   @include grid-column(11, $ds-custom-grid)
}

.ds-col-10 {
   @include grid-column(10, $ds-custom-grid)
}

.ds-col-9 {
   @include grid-column(9, $ds-custom-grid)
}

.ds-col-8 {
   @include grid-column(8, $ds-custom-grid)
}

.ds-col-7 {
   @include grid-column(7, $ds-custom-grid)
}

.ds-col-6 {
   @include grid-column(6, $ds-custom-grid)
}

.ds-col-5 {
   @include grid-column(5, $ds-custom-grid)
}

.ds-col-4 {
   @include grid-column(4, $ds-custom-grid)
}

.ds-col-3 {
   @include grid-column(3, $ds-custom-grid)
}

.ds-col-2 {
   @include grid-column(2, $ds-custom-grid)
}

.ds-col-1 {
   @include grid-column(1, $ds-custom-grid)
}