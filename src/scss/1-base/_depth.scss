/* Shadows are intentionally very subtle gradiations. */
$shadows-data: (
  500: (0 27px 24px 0 rgba(0, 0, 0, 0.24), 0 40px 77px 0 rgba(0, 0, 0, 0.19)),
  400: (0 16px 28px 0 rgba(0, 0, 0, 0.24), 0 25px 55px 0 rgba(0, 0, 0, 0.19)),
  300: (0 12px 15px 0 rgba(0, 0, 0, 0.24), 0 17px 50px 0 rgba(0, 0, 0, 0.19)),
  200: (0 6px 20px 0 rgba(0, 0, 0, 0.24), 0 8px 17px 0 rgba(0, 0, 0, 0.19)),
  100: (0 1px 5px 0 rgba(0, 0, 0, 0.13), 0 2px 4px 0 rgba(0, 0, 0, 0.2)),
  000: 0 0 0 0 transparent
);

$global-elements: (
  content: 100,
  overlay: 400,
);


/// Returns the shadow for the specified depth
/// @param {String} $depth [base] - The shadow's depth.
/// @return {List} The shadow value.

@function ds-depth($depth: 100) {
  $fetched-value: map-get($shadows-data, $depth);

  @if type-of($fetched-value) == list {
    @return $fetched-value;
  } @else {
    @error 'Shadow variant `#{$depth}` not found. Available variants: #{available-names($shadows-data)}';
  }
}


/// Returns the z-index of the specified element.
/// @param {String} $element - The key for the element.
/// @param {Map} $context - The map in which to search for the element.
/// @return {Number} The z-index for the element.

@function ds-z-index($element, $context: $global-elements) {
  $index: map-get($context, $element);

  @if $index {
    @return $index;
  } @else {
    @error 'z-index `#{$element}` in `#{$context}` not found.';
  }
}